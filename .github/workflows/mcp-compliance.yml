name: MCP Compliance Tests

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  compliance-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'pnpm'

    - name: Install pnpm
      run: npm install -g pnpm

    - name: Install dependencies
      run: pnpm install

    - name: Build server
      run: pnpm run build

    - name: Clone MCP Validator
      run: |
        git clone https://github.com/modelcontextprotocol/mcp-validator.git
        cd mcp-validator
        pip install -r requirements.txt

    - name: Run compliance tests
      env:
        HONEYCOMB_API_KEY: test_key
        HONEYCOMB_API_ENDPOINT: http://localhost:8080
      run: |
        python -m mcp_testing.scripts.compliance_report \
          --server-command "node ${{ github.workspace }}/build/index.mjs" \
          --protocol-version 2025-03-26
      working-directory: mcp-validator

    - name: Process compliance report
      id: process-report
      run: |
        # Create .github/mcp-compliance directory if it doesn't exist
        mkdir -p .github/mcp-compliance/reports

        # Get the latest report
        LATEST_REPORT=$(ls -t mcp-validator/reports/cr_*.md | head -n 1)
        
        if [ -f "$LATEST_REPORT" ]; then
          # Extract compliance percentage
          COMPLIANCE=$(grep "Compliance Status:" "$LATEST_REPORT" | grep -o "[0-9.]*")
          
          # Generate report name with compliance percentage
          REPORT_NAME="compliance-${COMPLIANCE}pct-$(date +%Y%m%d-%H%M%S).md"
          
          # Copy report
          cp "$LATEST_REPORT" ".github/mcp-compliance/reports/$REPORT_NAME"
          
          # Create latest symlink
          ln -sf "$REPORT_NAME" .github/mcp-compliance/reports/latest.md
          
          # Set outputs for use in other steps
          echo "report_path=.github/mcp-compliance/reports/$REPORT_NAME" >> $GITHUB_OUTPUT
          echo "compliance=$COMPLIANCE" >> $GITHUB_OUTPUT
          
          # Generate badge JSON
          mkdir -p .github/mcp-compliance/badges
          cat > .github/mcp-compliance/badges/compliance.json << EOF
          {
            "schemaVersion": 1,
            "label": "mcp-compliance",
            "message": "${COMPLIANCE}%",
            "color": $([ $(echo "$COMPLIANCE >= 90" | bc -l) = 1 ] && echo '"success"' || echo '"critical"')
          }
          EOF
        else
          echo "No report file found!"
          exit 1
        fi

    - name: Upload compliance artifacts
      uses: actions/upload-artifact@v4
      with:
        name: mcp-compliance
        path: |
          .github/mcp-compliance/reports/
          .github/mcp-compliance/badges/
        retention-days: 90

    - name: Comment PR with Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('.github/mcp-compliance/reports/latest.md', 'utf8');
          const summary = report.split('\n').slice(0, 20).join('\n'); // First 20 lines for summary
          const compliance = '${{ steps.process-report.outputs.compliance }}';
          
          const comment = `## MCP Compliance Test Results
          
          ![MCP Compliance](https://img.shields.io/badge/mcp--compliance-${compliance}%25-${parseFloat(compliance) >= 90 ? 'success' : 'critical'})
          
          ${summary}
          
          [Full Report](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

    - name: Update badges
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        git config --global user.name "GitHub Action"
        git config --global user.email "action@github.com"
        git add .github/mcp-compliance
        git commit -m "chore: Update MCP compliance report and badges [skip ci]" || echo "No changes to commit"
        git push 