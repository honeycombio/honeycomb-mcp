name: MCP Compliance Tests

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  compliance-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        protocol-version: ["2025-03-26"]
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.4.1

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Build server
        run: pnpm run build

      - name: Verify build output
        run: |
          ls -la build/
          test -f build/index.mjs || (echo "Server file not found" && exit 1)
          node -c build/index.mjs || (echo "JavaScript syntax error in build output" && exit 1)

      - name: Install MCP Validator
        run: |
          python -m pip install --upgrade pip
          git clone https://github.com/Janix-ai/mcp-validator.git /tmp/mcp-validator
          cd /tmp/mcp-validator
          pip install -r requirements.txt

      - name: Create reports directory
        run: mkdir -p reports

      - name: Run compliance tests
        id: stdio-test
        env:
          HONEYCOMB_API_KEY: ${{ secrets.HONEYCOMB_API_KEY }}
          HONEYCOMB_API_ENDPOINT: http://localhost:8080
          HONEYCOMB_CACHE_ENABLED: 'false'
          NODE_ENV: test
          PYTHONPATH: /tmp/mcp-validator
        run: |
          # Run compliance tests with proper error handling
          python -m mcp_testing.scripts.compliance_report \
            --server-command "node build/index.mjs" \
            --protocol-version ${{ matrix.protocol-version }} || {
              echo "Tests failed with exit code $?"
              # Don't fail the workflow on test failures - we want to see the results
              # The badge update will show the status
          }

      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mcp-compliance-reports-${{ matrix.protocol-version }}
          path: reports/
          retention-days: 14

      - name: Post summary to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            try {
              const reportFiles = fs.readdirSync('reports');
              const jsonReportFile = reportFiles.find(file => file.endsWith('.json'));
              
              let summary = "## MCP Compliance Test Results\n\n";
              
              if (jsonReportFile) {
                const reportData = JSON.parse(fs.readFileSync(`reports/${jsonReportFile}`, 'utf8'));
                summary += `- Protocol Version: ${reportData.protocol_version || 'Unknown'}\n`;
                summary += `- Success Rate: ${reportData.success_rate || 'Unknown'}\n`;
                summary += `- Tests Run: ${reportData.total_tests || 0}\n`;
                
                // Add failed tests if any
                const failedTests = (reportData.test_cases || []).filter(tc => tc.status === 'failed');
                if (failedTests.length > 0) {
                  summary += `\n### Failed Tests (${failedTests.length}):\n\n`;
                  failedTests.forEach(test => {
                    summary += `- ${test.name}: ${test.error_message || 'No error message'}\n`;
                  });
                }
              } else {
                summary += "No test report found.\n";
              }
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            } catch (error) {
              console.error('Error creating PR comment:', error);
              core.warning(`Failed to create PR comment: ${error.message}`);
            }

      - name: Update badges
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          # Read success rate from JSON report
          REPORT_FILE=$(ls -t reports/*.json | head -n 1)
          if [ -f "$REPORT_FILE" ]; then
            SUCCESS_RATE=$(jq -r '.success_rate // 0' "$REPORT_FILE")
            
            mkdir -p .github/mcp-compliance/badges
            cat > .github/mcp-compliance/badges/compliance.json << EOF
            {
              "schemaVersion": 1,
              "label": "mcp-compliance",
              "message": "${SUCCESS_RATE}%",
              "color": $([ $(echo "$SUCCESS_RATE >= 90" | bc -l) = 1 ] && echo '"success"' || echo '"critical"')
            }
            EOF
            
            git config --global user.name "GitHub Action"
            git config --global user.email "action@github.com"
            git add .github/mcp-compliance/badges
            git commit -m "chore: Update MCP compliance badge [skip ci]" || echo "No changes to commit"
            git push origin HEAD:main || echo "Failed to push badge update"
          fi 