name: Tests & Evaluation

on:
  push:
    branches: [ main ]
  pull_request:
    # Run on all pull requests, regardless of target branch

# Add permissions to allow PR comments
permissions:
  contents: read
  pull-requests: write
  actions: read

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    
    # Setup PNPM - must be before setting up Node.js cache
    - name: Setup PNPM
      uses: pnpm/action-setup@v2
    
    # Setup Node.js cache after PNPM is installed
    - name: Setup Node.js with cache
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'
    
    - name: Install dependencies
      run: pnpm install
    
    - name: Run TypeScript type-checking
      run: pnpm exec tsc --noEmit
    
    - name: Run tests
      run: pnpm test
    
    - name: Run test with coverage
      run: pnpm test:coverage
      
    - name: Build
      run: pnpm build

  # New job that runs after all test matrix jobs complete
  evaluate:
    name: Run Evaluations
    # This job will only run if all test jobs succeed
    needs: test
    runs-on: ubuntu-latest
    # Special handling for main branch
    if: success()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PNPM
      uses: pnpm/action-setup@v2
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'pnpm'
    
    - name: Install dependencies
      run: pnpm install
    
    - name: Build project for evaluation
      run: pnpm run build
    
    - name: Create MCP config
      run: |
        echo '${{ secrets.MCP_CONFIG }}' > .mcp-honeycomb.json
        echo "Created MCP config file"
    
    # Verify the build file exists before running evals
    - name: Verify build file exists
      run: |
        if [ ! -f "build/index.mjs" ]; then
          echo "ERROR: build/index.mjs does not exist after build step!"
          echo "<html><body><h1>Evaluation Failed</h1><p>The MCP build output file does not exist. Check the build step for errors.</p></body></html>" > eval/reports/build-failed.html
          exit 1
        else
          echo "Build file found, proceeding with evaluation"
        fi

    - name: Run evaluations
      id: run_evals
      continue-on-error: true
      run: pnpm run eval
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        # Use only limited models for CI to save costs
        EVAL_MODELS: '{"openai":"gpt-4o","anthropic":"claude-3-5-haiku-latest"}'
        EVAL_CONCURRENCY: 2
        MCP_SERVER_COMMAND: "node build/index.mjs"
        
    # Mark step as failed if evaluations didn't run successfully
    - name: Check evaluation result
      if: steps.run_evals.outcome != 'success'
      run: |
        echo "Evaluations failed to run properly!"
        mkdir -p eval/reports
        echo "<html><body><h1>Evaluation Failed</h1><p>The evaluation process encountered an error. Check the logs for details.</p><pre>$(cat .mcp-honeycomb.json || echo 'Config file not found')</pre></body></html>" > eval/reports/eval-failed.html
        exit 1
    
    - name: Ensure reports directory exists
      run: mkdir -p eval/reports
      
    - name: Create index file if no reports are generated
      run: |
        # Check if any HTML reports exist
        if [ -z "$(find eval/reports -name '*.html' 2>/dev/null)" ]; then
          echo "No reports were generated, creating a placeholder"
          echo "<html><body><h1>No evaluation reports generated</h1><p>This could be due to missing API keys or configuration.</p></body></html>" > eval/reports/no-reports.html
        fi
        
    - name: Find latest report
      id: find-report
      run: |
        LATEST_REPORT=$(ls -t eval/reports/*.html 2>/dev/null | head -1 || echo "eval/reports/no-reports.html")
        echo "latest_report=$LATEST_REPORT" >> $GITHUB_OUTPUT
    
    - name: Post report summary
      run: |
        echo "## Evaluation Results" > $GITHUB_STEP_SUMMARY
        echo "Ran evaluations with OpenAI and Anthropic models." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Summary" >> $GITHUB_STEP_SUMMARY
        echo "Latest report: $(basename ${{ steps.find-report.outputs.latest_report }})" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The full report is available as a workflow artifact." >> $GITHUB_STEP_SUMMARY
        
        # Add PR comment if we're on a PR
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          PR_COMMENT="## Honeycomb MCP Evaluation Results\n\n"
          PR_COMMENT+="âœ… Evaluations completed successfully\n\n"
          PR_COMMENT+="Download the full report from the workflow artifacts"
          
          echo -e "$PR_COMMENT" > pr_comment.txt
          
          gh pr comment ${{ github.event.pull_request.number }} --body-file pr_comment.txt
        fi
      env:
        GH_TOKEN: ${{ github.token }}
    
    # Create report index if it doesn't exist
    - name: Generate report index if needed
      run: |
        if [ ! -f "eval/reports/index.html" ]; then
          echo "Generating index.html for reports"
          cat > eval/reports/index.html << EOF
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Honeycomb MCP Evaluation Reports</title>
            <style>
              body { font-family: sans-serif; line-height: 1.6; margin: 0; padding: 20px; color: #333; }
              .container { max-width: 800px; margin: 0 auto; }
              h1 { color: #F5A623; border-bottom: 2px solid #F5A623; padding-bottom: 10px; }
              ul { list-style-type: none; padding: 0; }
              li { margin: 10px 0; padding: 10px; border-bottom: 1px solid #eee; }
              a { color: #0066cc; text-decoration: none; }
              a:hover { text-decoration: underline; }
            </style>
          </head>
          <body>
            <div class="container">
              <h1>Honeycomb MCP Evaluation Reports</h1>
              <p>Select a report to view:</p>
              <ul>
                $(for file in $(find eval/reports -name "*.html" -not -name "index.html" | sort -r); do
                  filename=$(basename $file)
                  echo "<li><a href=\"$filename\">$filename</a></li>"
                done)
              </ul>
            </div>
          </body>
          </html>
          EOF
        fi
    
    # Upload evaluation reports as artifacts
    - name: Upload evaluation reports
      uses: actions/upload-artifact@v4
      with:
        name: evaluation-reports
        path: eval/reports/
        retention-days: 30